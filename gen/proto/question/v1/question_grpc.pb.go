// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/question/v1/question.proto

package questionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionService_Publish_FullMethodName                      = "/question.v1.QuestionService/Publish"
	QuestionService_GetRecommendationInviteeUids_FullMethodName = "/question.v1.QuestionService/GetRecommendationInviteeUids"
	QuestionService_GetDetailById_FullMethodName                = "/question.v1.QuestionService/GetDetailById"
	QuestionService_InviteUserToAnswer_FullMethodName           = "/question.v1.QuestionService/InviteUserToAnswer"
	QuestionService_CountBizQuestions_FullMethodName            = "/question.v1.QuestionService/CountBizQuestions"
	QuestionService_ListBizQuestions_FullMethodName             = "/question.v1.QuestionService/ListBizQuestions"
	QuestionService_ListUserQuestions_FullMethodName            = "/question.v1.QuestionService/ListUserQuestions"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	GetRecommendationInviteeUids(ctx context.Context, in *GetRecommendationInviteeUidsRequest, opts ...grpc.CallOption) (*GetRecommendationInviteeUidsResponse, error)
	GetDetailById(ctx context.Context, in *GetDetailByIdRequest, opts ...grpc.CallOption) (*GetDetailByIdResponse, error)
	InviteUserToAnswer(ctx context.Context, in *InviteUserToAnswerRequest, opts ...grpc.CallOption) (*InviteUserToAnswerResponse, error)
	CountBizQuestions(ctx context.Context, in *CountQuestionsRequest, opts ...grpc.CallOption) (*CountQuestionsResponse, error)
	ListBizQuestions(ctx context.Context, in *ListBizQuestionsRequest, opts ...grpc.CallOption) (*ListBizQuestionsResponse, error)
	ListUserQuestions(ctx context.Context, in *ListUserQuestionsRequest, opts ...grpc.CallOption) (*ListUserQuestionsResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, QuestionService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetRecommendationInviteeUids(ctx context.Context, in *GetRecommendationInviteeUidsRequest, opts ...grpc.CallOption) (*GetRecommendationInviteeUidsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationInviteeUidsResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetRecommendationInviteeUids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetDetailById(ctx context.Context, in *GetDetailByIdRequest, opts ...grpc.CallOption) (*GetDetailByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailByIdResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) InviteUserToAnswer(ctx context.Context, in *InviteUserToAnswerRequest, opts ...grpc.CallOption) (*InviteUserToAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserToAnswerResponse)
	err := c.cc.Invoke(ctx, QuestionService_InviteUserToAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CountBizQuestions(ctx context.Context, in *CountQuestionsRequest, opts ...grpc.CallOption) (*CountQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_CountBizQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListBizQuestions(ctx context.Context, in *ListBizQuestionsRequest, opts ...grpc.CallOption) (*ListBizQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBizQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_ListBizQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListUserQuestions(ctx context.Context, in *ListUserQuestionsRequest, opts ...grpc.CallOption) (*ListUserQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_ListUserQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility.
type QuestionServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	GetRecommendationInviteeUids(context.Context, *GetRecommendationInviteeUidsRequest) (*GetRecommendationInviteeUidsResponse, error)
	GetDetailById(context.Context, *GetDetailByIdRequest) (*GetDetailByIdResponse, error)
	InviteUserToAnswer(context.Context, *InviteUserToAnswerRequest) (*InviteUserToAnswerResponse, error)
	CountBizQuestions(context.Context, *CountQuestionsRequest) (*CountQuestionsResponse, error)
	ListBizQuestions(context.Context, *ListBizQuestionsRequest) (*ListBizQuestionsResponse, error)
	ListUserQuestions(context.Context, *ListUserQuestionsRequest) (*ListUserQuestionsResponse, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServiceServer struct{}

func (UnimplementedQuestionServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedQuestionServiceServer) GetRecommendationInviteeUids(context.Context, *GetRecommendationInviteeUidsRequest) (*GetRecommendationInviteeUidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationInviteeUids not implemented")
}
func (UnimplementedQuestionServiceServer) GetDetailById(context.Context, *GetDetailByIdRequest) (*GetDetailByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailById not implemented")
}
func (UnimplementedQuestionServiceServer) InviteUserToAnswer(context.Context, *InviteUserToAnswerRequest) (*InviteUserToAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserToAnswer not implemented")
}
func (UnimplementedQuestionServiceServer) CountBizQuestions(context.Context, *CountQuestionsRequest) (*CountQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBizQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) ListBizQuestions(context.Context, *ListBizQuestionsRequest) (*ListBizQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBizQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) ListUserQuestions(context.Context, *ListUserQuestionsRequest) (*ListUserQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}
func (UnimplementedQuestionServiceServer) testEmbeddedByValue()                         {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetRecommendationInviteeUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationInviteeUidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetRecommendationInviteeUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetRecommendationInviteeUids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetRecommendationInviteeUids(ctx, req.(*GetRecommendationInviteeUidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetDetailById(ctx, req.(*GetDetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_InviteUserToAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).InviteUserToAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_InviteUserToAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).InviteUserToAnswer(ctx, req.(*InviteUserToAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CountBizQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CountBizQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_CountBizQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CountBizQuestions(ctx, req.(*CountQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListBizQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBizQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListBizQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ListBizQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListBizQuestions(ctx, req.(*ListBizQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListUserQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListUserQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ListUserQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListUserQuestions(ctx, req.(*ListUserQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.v1.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _QuestionService_Publish_Handler,
		},
		{
			MethodName: "GetRecommendationInviteeUids",
			Handler:    _QuestionService_GetRecommendationInviteeUids_Handler,
		},
		{
			MethodName: "GetDetailById",
			Handler:    _QuestionService_GetDetailById_Handler,
		},
		{
			MethodName: "InviteUserToAnswer",
			Handler:    _QuestionService_InviteUserToAnswer_Handler,
		},
		{
			MethodName: "CountBizQuestions",
			Handler:    _QuestionService_CountBizQuestions_Handler,
		},
		{
			MethodName: "ListBizQuestions",
			Handler:    _QuestionService_ListBizQuestions_Handler,
		},
		{
			MethodName: "ListUserQuestions",
			Handler:    _QuestionService_ListUserQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/question/v1/question.proto",
}
