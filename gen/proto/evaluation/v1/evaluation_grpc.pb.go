// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/evaluation/v1/evaluation.proto

package evaluationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EvaluationService_Evaluated_FullMethodName               = "/evaluation.v1.EvaluationService/Evaluated"
	EvaluationService_Save_FullMethodName                    = "/evaluation.v1.EvaluationService/Save"
	EvaluationService_UpdateStatus_FullMethodName            = "/evaluation.v1.EvaluationService/UpdateStatus"
	EvaluationService_ListRecent_FullMethodName              = "/evaluation.v1.EvaluationService/ListRecent"
	EvaluationService_ListCourse_FullMethodName              = "/evaluation.v1.EvaluationService/ListCourse"
	EvaluationService_ListMine_FullMethodName                = "/evaluation.v1.EvaluationService/ListMine"
	EvaluationService_CountCourseInvisible_FullMethodName    = "/evaluation.v1.EvaluationService/CountCourseInvisible"
	EvaluationService_CountMine_FullMethodName               = "/evaluation.v1.EvaluationService/CountMine"
	EvaluationService_Detail_FullMethodName                  = "/evaluation.v1.EvaluationService/Detail"
	EvaluationService_VisiblePublishersCourse_FullMethodName = "/evaluation.v1.EvaluationService/VisiblePublishersCourse"
	EvaluationService_CompositeScoreCourse_FullMethodName    = "/evaluation.v1.EvaluationService/CompositeScoreCourse"
)

// EvaluationServiceClient is the client API for EvaluationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvaluationServiceClient interface {
	Evaluated(ctx context.Context, in *EvaluatedRequest, opts ...grpc.CallOption) (*EvaluatedResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	ListRecent(ctx context.Context, in *ListRecentRequest, opts ...grpc.CallOption) (*ListRecentResponse, error)
	ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseResponse, error)
	ListMine(ctx context.Context, in *ListMineRequest, opts ...grpc.CallOption) (*ListMineResponse, error)
	CountCourseInvisible(ctx context.Context, in *CountCourseInvisibleRequest, opts ...grpc.CallOption) (*CountCourseInvisibleResponse, error)
	CountMine(ctx context.Context, in *CountMineRequest, opts ...grpc.CallOption) (*CountMineResponse, error)
	Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
	VisiblePublishersCourse(ctx context.Context, in *VisiblePublishersCourseRequest, opts ...grpc.CallOption) (*VisiblePublishersCourseResponse, error)
	CompositeScoreCourse(ctx context.Context, in *CompositeScoreCourseRequest, opts ...grpc.CallOption) (*CompositeScoreCourseResponse, error)
}

type evaluationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluationServiceClient(cc grpc.ClientConnInterface) EvaluationServiceClient {
	return &evaluationServiceClient{cc}
}

func (c *evaluationServiceClient) Evaluated(ctx context.Context, in *EvaluatedRequest, opts ...grpc.CallOption) (*EvaluatedResponse, error) {
	out := new(EvaluatedResponse)
	err := c.cc.Invoke(ctx, EvaluationService_Evaluated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, EvaluationService_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, EvaluationService_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) ListRecent(ctx context.Context, in *ListRecentRequest, opts ...grpc.CallOption) (*ListRecentResponse, error) {
	out := new(ListRecentResponse)
	err := c.cc.Invoke(ctx, EvaluationService_ListRecent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) ListCourse(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseResponse, error) {
	out := new(ListCourseResponse)
	err := c.cc.Invoke(ctx, EvaluationService_ListCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) ListMine(ctx context.Context, in *ListMineRequest, opts ...grpc.CallOption) (*ListMineResponse, error) {
	out := new(ListMineResponse)
	err := c.cc.Invoke(ctx, EvaluationService_ListMine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) CountCourseInvisible(ctx context.Context, in *CountCourseInvisibleRequest, opts ...grpc.CallOption) (*CountCourseInvisibleResponse, error) {
	out := new(CountCourseInvisibleResponse)
	err := c.cc.Invoke(ctx, EvaluationService_CountCourseInvisible_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) CountMine(ctx context.Context, in *CountMineRequest, opts ...grpc.CallOption) (*CountMineResponse, error) {
	out := new(CountMineResponse)
	err := c.cc.Invoke(ctx, EvaluationService_CountMine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	out := new(DetailResponse)
	err := c.cc.Invoke(ctx, EvaluationService_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) VisiblePublishersCourse(ctx context.Context, in *VisiblePublishersCourseRequest, opts ...grpc.CallOption) (*VisiblePublishersCourseResponse, error) {
	out := new(VisiblePublishersCourseResponse)
	err := c.cc.Invoke(ctx, EvaluationService_VisiblePublishersCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) CompositeScoreCourse(ctx context.Context, in *CompositeScoreCourseRequest, opts ...grpc.CallOption) (*CompositeScoreCourseResponse, error) {
	out := new(CompositeScoreCourseResponse)
	err := c.cc.Invoke(ctx, EvaluationService_CompositeScoreCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvaluationServiceServer is the server API for EvaluationService service.
// All implementations must embed UnimplementedEvaluationServiceServer
// for forward compatibility
type EvaluationServiceServer interface {
	Evaluated(context.Context, *EvaluatedRequest) (*EvaluatedResponse, error)
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	ListRecent(context.Context, *ListRecentRequest) (*ListRecentResponse, error)
	ListCourse(context.Context, *ListCourseRequest) (*ListCourseResponse, error)
	ListMine(context.Context, *ListMineRequest) (*ListMineResponse, error)
	CountCourseInvisible(context.Context, *CountCourseInvisibleRequest) (*CountCourseInvisibleResponse, error)
	CountMine(context.Context, *CountMineRequest) (*CountMineResponse, error)
	Detail(context.Context, *DetailRequest) (*DetailResponse, error)
	VisiblePublishersCourse(context.Context, *VisiblePublishersCourseRequest) (*VisiblePublishersCourseResponse, error)
	CompositeScoreCourse(context.Context, *CompositeScoreCourseRequest) (*CompositeScoreCourseResponse, error)
	mustEmbedUnimplementedEvaluationServiceServer()
}

// UnimplementedEvaluationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEvaluationServiceServer struct {
}

func (UnimplementedEvaluationServiceServer) Evaluated(context.Context, *EvaluatedRequest) (*EvaluatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluated not implemented")
}
func (UnimplementedEvaluationServiceServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedEvaluationServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedEvaluationServiceServer) ListRecent(context.Context, *ListRecentRequest) (*ListRecentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecent not implemented")
}
func (UnimplementedEvaluationServiceServer) ListCourse(context.Context, *ListCourseRequest) (*ListCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourse not implemented")
}
func (UnimplementedEvaluationServiceServer) ListMine(context.Context, *ListMineRequest) (*ListMineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMine not implemented")
}
func (UnimplementedEvaluationServiceServer) CountCourseInvisible(context.Context, *CountCourseInvisibleRequest) (*CountCourseInvisibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCourseInvisible not implemented")
}
func (UnimplementedEvaluationServiceServer) CountMine(context.Context, *CountMineRequest) (*CountMineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMine not implemented")
}
func (UnimplementedEvaluationServiceServer) Detail(context.Context, *DetailRequest) (*DetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedEvaluationServiceServer) VisiblePublishersCourse(context.Context, *VisiblePublishersCourseRequest) (*VisiblePublishersCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisiblePublishersCourse not implemented")
}
func (UnimplementedEvaluationServiceServer) CompositeScoreCourse(context.Context, *CompositeScoreCourseRequest) (*CompositeScoreCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompositeScoreCourse not implemented")
}
func (UnimplementedEvaluationServiceServer) mustEmbedUnimplementedEvaluationServiceServer() {}

// UnsafeEvaluationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvaluationServiceServer will
// result in compilation errors.
type UnsafeEvaluationServiceServer interface {
	mustEmbedUnimplementedEvaluationServiceServer()
}

func RegisterEvaluationServiceServer(s grpc.ServiceRegistrar, srv EvaluationServiceServer) {
	s.RegisterService(&EvaluationService_ServiceDesc, srv)
}

func _EvaluationService_Evaluated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).Evaluated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_Evaluated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).Evaluated(ctx, req.(*EvaluatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_ListRecent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).ListRecent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_ListRecent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).ListRecent(ctx, req.(*ListRecentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_ListCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).ListCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_ListCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).ListCourse(ctx, req.(*ListCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_ListMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).ListMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_ListMine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).ListMine(ctx, req.(*ListMineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_CountCourseInvisible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCourseInvisibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).CountCourseInvisible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_CountCourseInvisible_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).CountCourseInvisible(ctx, req.(*CountCourseInvisibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_CountMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountMineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).CountMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_CountMine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).CountMine(ctx, req.(*CountMineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).Detail(ctx, req.(*DetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_VisiblePublishersCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisiblePublishersCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).VisiblePublishersCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_VisiblePublishersCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).VisiblePublishersCourse(ctx, req.(*VisiblePublishersCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_CompositeScoreCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositeScoreCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).CompositeScoreCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_CompositeScoreCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).CompositeScoreCourse(ctx, req.(*CompositeScoreCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvaluationService_ServiceDesc is the grpc.ServiceDesc for EvaluationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvaluationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evaluation.v1.EvaluationService",
	HandlerType: (*EvaluationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evaluated",
			Handler:    _EvaluationService_Evaluated_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _EvaluationService_Save_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _EvaluationService_UpdateStatus_Handler,
		},
		{
			MethodName: "ListRecent",
			Handler:    _EvaluationService_ListRecent_Handler,
		},
		{
			MethodName: "ListCourse",
			Handler:    _EvaluationService_ListCourse_Handler,
		},
		{
			MethodName: "ListMine",
			Handler:    _EvaluationService_ListMine_Handler,
		},
		{
			MethodName: "CountCourseInvisible",
			Handler:    _EvaluationService_CountCourseInvisible_Handler,
		},
		{
			MethodName: "CountMine",
			Handler:    _EvaluationService_CountMine_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _EvaluationService_Detail_Handler,
		},
		{
			MethodName: "VisiblePublishersCourse",
			Handler:    _EvaluationService_VisiblePublishersCourse_Handler,
		},
		{
			MethodName: "CompositeScoreCourse",
			Handler:    _EvaluationService_CompositeScoreCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/evaluation/v1/evaluation.proto",
}
