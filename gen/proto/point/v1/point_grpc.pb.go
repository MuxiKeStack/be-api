// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/point/v1/point.proto

package pointv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PointService_GetTitleOfUser_FullMethodName       = "/point.v1.PointService/GetTitleOfUser"
	PointService_SaveUsingTitleOfUser_FullMethodName = "/point.v1.PointService/SaveUsingTitleOfUser"
	PointService_GetPointInfoOfUser_FullMethodName   = "/point.v1.PointService/GetPointInfoOfUser"
)

// PointServiceClient is the client API for PointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointServiceClient interface {
	GetTitleOfUser(ctx context.Context, in *GetTitleOfUserRequest, opts ...grpc.CallOption) (*GetTitleOfUserResponse, error)
	SaveUsingTitleOfUser(ctx context.Context, in *SaveUsingTitleOfUserRequest, opts ...grpc.CallOption) (*SaveUsingTitleOfUserResponse, error)
	GetPointInfoOfUser(ctx context.Context, in *GetPointInfoOfUserRequest, opts ...grpc.CallOption) (*GetPointInfoOfUserResponse, error)
}

type pointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointServiceClient(cc grpc.ClientConnInterface) PointServiceClient {
	return &pointServiceClient{cc}
}

func (c *pointServiceClient) GetTitleOfUser(ctx context.Context, in *GetTitleOfUserRequest, opts ...grpc.CallOption) (*GetTitleOfUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTitleOfUserResponse)
	err := c.cc.Invoke(ctx, PointService_GetTitleOfUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) SaveUsingTitleOfUser(ctx context.Context, in *SaveUsingTitleOfUserRequest, opts ...grpc.CallOption) (*SaveUsingTitleOfUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveUsingTitleOfUserResponse)
	err := c.cc.Invoke(ctx, PointService_SaveUsingTitleOfUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointServiceClient) GetPointInfoOfUser(ctx context.Context, in *GetPointInfoOfUserRequest, opts ...grpc.CallOption) (*GetPointInfoOfUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointInfoOfUserResponse)
	err := c.cc.Invoke(ctx, PointService_GetPointInfoOfUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointServiceServer is the server API for PointService service.
// All implementations must embed UnimplementedPointServiceServer
// for forward compatibility
type PointServiceServer interface {
	GetTitleOfUser(context.Context, *GetTitleOfUserRequest) (*GetTitleOfUserResponse, error)
	SaveUsingTitleOfUser(context.Context, *SaveUsingTitleOfUserRequest) (*SaveUsingTitleOfUserResponse, error)
	GetPointInfoOfUser(context.Context, *GetPointInfoOfUserRequest) (*GetPointInfoOfUserResponse, error)
	mustEmbedUnimplementedPointServiceServer()
}

// UnimplementedPointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPointServiceServer struct {
}

func (UnimplementedPointServiceServer) GetTitleOfUser(context.Context, *GetTitleOfUserRequest) (*GetTitleOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitleOfUser not implemented")
}
func (UnimplementedPointServiceServer) SaveUsingTitleOfUser(context.Context, *SaveUsingTitleOfUserRequest) (*SaveUsingTitleOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUsingTitleOfUser not implemented")
}
func (UnimplementedPointServiceServer) GetPointInfoOfUser(context.Context, *GetPointInfoOfUserRequest) (*GetPointInfoOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointInfoOfUser not implemented")
}
func (UnimplementedPointServiceServer) mustEmbedUnimplementedPointServiceServer() {}

// UnsafePointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointServiceServer will
// result in compilation errors.
type UnsafePointServiceServer interface {
	mustEmbedUnimplementedPointServiceServer()
}

func RegisterPointServiceServer(s grpc.ServiceRegistrar, srv PointServiceServer) {
	s.RegisterService(&PointService_ServiceDesc, srv)
}

func _PointService_GetTitleOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitleOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetTitleOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointService_GetTitleOfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetTitleOfUser(ctx, req.(*GetTitleOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_SaveUsingTitleOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUsingTitleOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).SaveUsingTitleOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointService_SaveUsingTitleOfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).SaveUsingTitleOfUser(ctx, req.(*SaveUsingTitleOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointService_GetPointInfoOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointInfoOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointServiceServer).GetPointInfoOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointService_GetPointInfoOfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointServiceServer).GetPointInfoOfUser(ctx, req.(*GetPointInfoOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointService_ServiceDesc is the grpc.ServiceDesc for PointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "point.v1.PointService",
	HandlerType: (*PointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTitleOfUser",
			Handler:    _PointService_GetTitleOfUser_Handler,
		},
		{
			MethodName: "SaveUsingTitleOfUser",
			Handler:    _PointService_SaveUsingTitleOfUser_Handler,
		},
		{
			MethodName: "GetPointInfoOfUser",
			Handler:    _PointService_GetPointInfoOfUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/point/v1/point.proto",
}
