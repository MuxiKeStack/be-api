// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/grade/v1/grade.proto

package gradev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GradeService_GetGradesByCourseId_FullMethodName = "/grade.v1.GradeService/GetGradesByCourseId"
	GradeService_SignForGradeSharing_FullMethodName = "/grade.v1.GradeService/SignForGradeSharing"
	GradeService_ShareGrade_FullMethodName          = "/grade.v1.GradeService/ShareGrade"
	GradeService_GetSignStatus_FullMethodName       = "/grade.v1.GradeService/GetSignStatus"
)

// GradeServiceClient is the client API for GradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradeServiceClient interface {
	GetGradesByCourseId(ctx context.Context, in *GetGradesByCourseIdRequest, opts ...grpc.CallOption) (*GetGradesByCourseIdResponse, error)
	SignForGradeSharing(ctx context.Context, in *SignForGradeSharingRequest, opts ...grpc.CallOption) (*SignForGradeSharingResponse, error)
	ShareGrade(ctx context.Context, in *ShareGradeRequest, opts ...grpc.CallOption) (*ShareGradeResponse, error)
	GetSignStatus(ctx context.Context, in *GetSignStatusRequest, opts ...grpc.CallOption) (*GetSignStatusResponse, error)
}

type gradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeServiceClient(cc grpc.ClientConnInterface) GradeServiceClient {
	return &gradeServiceClient{cc}
}

func (c *gradeServiceClient) GetGradesByCourseId(ctx context.Context, in *GetGradesByCourseIdRequest, opts ...grpc.CallOption) (*GetGradesByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradesByCourseIdResponse)
	err := c.cc.Invoke(ctx, GradeService_GetGradesByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) SignForGradeSharing(ctx context.Context, in *SignForGradeSharingRequest, opts ...grpc.CallOption) (*SignForGradeSharingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignForGradeSharingResponse)
	err := c.cc.Invoke(ctx, GradeService_SignForGradeSharing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) ShareGrade(ctx context.Context, in *ShareGradeRequest, opts ...grpc.CallOption) (*ShareGradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareGradeResponse)
	err := c.cc.Invoke(ctx, GradeService_ShareGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetSignStatus(ctx context.Context, in *GetSignStatusRequest, opts ...grpc.CallOption) (*GetSignStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignStatusResponse)
	err := c.cc.Invoke(ctx, GradeService_GetSignStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServiceServer is the server API for GradeService service.
// All implementations must embed UnimplementedGradeServiceServer
// for forward compatibility.
type GradeServiceServer interface {
	GetGradesByCourseId(context.Context, *GetGradesByCourseIdRequest) (*GetGradesByCourseIdResponse, error)
	SignForGradeSharing(context.Context, *SignForGradeSharingRequest) (*SignForGradeSharingResponse, error)
	ShareGrade(context.Context, *ShareGradeRequest) (*ShareGradeResponse, error)
	GetSignStatus(context.Context, *GetSignStatusRequest) (*GetSignStatusResponse, error)
	mustEmbedUnimplementedGradeServiceServer()
}

// UnimplementedGradeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGradeServiceServer struct{}

func (UnimplementedGradeServiceServer) GetGradesByCourseId(context.Context, *GetGradesByCourseIdRequest) (*GetGradesByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradesByCourseId not implemented")
}
func (UnimplementedGradeServiceServer) SignForGradeSharing(context.Context, *SignForGradeSharingRequest) (*SignForGradeSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignForGradeSharing not implemented")
}
func (UnimplementedGradeServiceServer) ShareGrade(context.Context, *ShareGradeRequest) (*ShareGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareGrade not implemented")
}
func (UnimplementedGradeServiceServer) GetSignStatus(context.Context, *GetSignStatusRequest) (*GetSignStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignStatus not implemented")
}
func (UnimplementedGradeServiceServer) mustEmbedUnimplementedGradeServiceServer() {}
func (UnimplementedGradeServiceServer) testEmbeddedByValue()                      {}

// UnsafeGradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeServiceServer will
// result in compilation errors.
type UnsafeGradeServiceServer interface {
	mustEmbedUnimplementedGradeServiceServer()
}

func RegisterGradeServiceServer(s grpc.ServiceRegistrar, srv GradeServiceServer) {
	// If the following call pancis, it indicates UnimplementedGradeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GradeService_ServiceDesc, srv)
}

func _GradeService_GetGradesByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradesByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGradesByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGradesByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGradesByCourseId(ctx, req.(*GetGradesByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_SignForGradeSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignForGradeSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).SignForGradeSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_SignForGradeSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).SignForGradeSharing(ctx, req.(*SignForGradeSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_ShareGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).ShareGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_ShareGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).ShareGrade(ctx, req.(*ShareGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetSignStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetSignStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetSignStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetSignStatus(ctx, req.(*GetSignStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GradeService_ServiceDesc is the grpc.ServiceDesc for GradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grade.v1.GradeService",
	HandlerType: (*GradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGradesByCourseId",
			Handler:    _GradeService_GetGradesByCourseId_Handler,
		},
		{
			MethodName: "SignForGradeSharing",
			Handler:    _GradeService_SignForGradeSharing_Handler,
		},
		{
			MethodName: "ShareGrade",
			Handler:    _GradeService_ShareGrade_Handler,
		},
		{
			MethodName: "GetSignStatus",
			Handler:    _GradeService_GetSignStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grade/v1/grade.proto",
}
