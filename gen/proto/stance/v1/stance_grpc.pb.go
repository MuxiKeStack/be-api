// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/stance/v1/stance.proto

package stancev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StanceService_Endorse_FullMethodName       = "/stance.v1.StanceService/Endorse"
	StanceService_GetUserStance_FullMethodName = "/stance.v1.StanceService/GetUserStance"
	StanceService_CountStance_FullMethodName   = "/stance.v1.StanceService/CountStance"
)

// StanceServiceClient is the client API for StanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StanceServiceClient interface {
	Endorse(ctx context.Context, in *EndorseRequest, opts ...grpc.CallOption) (*EndorseResponse, error)
	GetUserStance(ctx context.Context, in *GetUserStanceRequest, opts ...grpc.CallOption) (*GetUserStanceResponse, error)
	CountStance(ctx context.Context, in *CountStanceRequest, opts ...grpc.CallOption) (*CountStanceResponse, error)
}

type stanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStanceServiceClient(cc grpc.ClientConnInterface) StanceServiceClient {
	return &stanceServiceClient{cc}
}

func (c *stanceServiceClient) Endorse(ctx context.Context, in *EndorseRequest, opts ...grpc.CallOption) (*EndorseResponse, error) {
	out := new(EndorseResponse)
	err := c.cc.Invoke(ctx, StanceService_Endorse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stanceServiceClient) GetUserStance(ctx context.Context, in *GetUserStanceRequest, opts ...grpc.CallOption) (*GetUserStanceResponse, error) {
	out := new(GetUserStanceResponse)
	err := c.cc.Invoke(ctx, StanceService_GetUserStance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stanceServiceClient) CountStance(ctx context.Context, in *CountStanceRequest, opts ...grpc.CallOption) (*CountStanceResponse, error) {
	out := new(CountStanceResponse)
	err := c.cc.Invoke(ctx, StanceService_CountStance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StanceServiceServer is the server API for StanceService service.
// All implementations must embed UnimplementedStanceServiceServer
// for forward compatibility
type StanceServiceServer interface {
	Endorse(context.Context, *EndorseRequest) (*EndorseResponse, error)
	GetUserStance(context.Context, *GetUserStanceRequest) (*GetUserStanceResponse, error)
	CountStance(context.Context, *CountStanceRequest) (*CountStanceResponse, error)
	mustEmbedUnimplementedStanceServiceServer()
}

// UnimplementedStanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStanceServiceServer struct {
}

func (UnimplementedStanceServiceServer) Endorse(context.Context, *EndorseRequest) (*EndorseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endorse not implemented")
}
func (UnimplementedStanceServiceServer) GetUserStance(context.Context, *GetUserStanceRequest) (*GetUserStanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStance not implemented")
}
func (UnimplementedStanceServiceServer) CountStance(context.Context, *CountStanceRequest) (*CountStanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountStance not implemented")
}
func (UnimplementedStanceServiceServer) mustEmbedUnimplementedStanceServiceServer() {}

// UnsafeStanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StanceServiceServer will
// result in compilation errors.
type UnsafeStanceServiceServer interface {
	mustEmbedUnimplementedStanceServiceServer()
}

func RegisterStanceServiceServer(s grpc.ServiceRegistrar, srv StanceServiceServer) {
	s.RegisterService(&StanceService_ServiceDesc, srv)
}

func _StanceService_Endorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndorseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StanceServiceServer).Endorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StanceService_Endorse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StanceServiceServer).Endorse(ctx, req.(*EndorseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StanceService_GetUserStance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StanceServiceServer).GetUserStance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StanceService_GetUserStance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StanceServiceServer).GetUserStance(ctx, req.(*GetUserStanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StanceService_CountStance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountStanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StanceServiceServer).CountStance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StanceService_CountStance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StanceServiceServer).CountStance(ctx, req.(*CountStanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StanceService_ServiceDesc is the grpc.ServiceDesc for StanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stance.v1.StanceService",
	HandlerType: (*StanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endorse",
			Handler:    _StanceService_Endorse_Handler,
		},
		{
			MethodName: "GetUserStance",
			Handler:    _StanceService_GetUserStance_Handler,
		},
		{
			MethodName: "CountStance",
			Handler:    _StanceService_CountStance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stance/v1/stance.proto",
}
