syntax = "proto3";

package course.v1;
option go_package="github.com/MuxiKeStack/be-api/gen/proto/course/v1;coursev1";

service CourseService {
  rpc SubscriptionList(SubscriptionListRequest)returns(SubscriptionListResponse);
  rpc GetDetailById(GetDetailByIdRequest)returns(GetDetailByIdResponse);
  rpc GetSubscriberUidsById(GetSubscriberUidsByIdRequest)returns(GetSubscriberUidsByIdResponse);
  rpc Subscribed (SubscribedRequest) returns (SubscribedResponse);
  // 批处理，减少网络开销和延迟
  rpc FindIdsOrUpsertByCourses (FindIdOrUpsertByCoursesRequest) returns (FindIdOrUpsertByCoursesResponse);
}

// 因为Property，不仅仅要在内部使用，所以改为在proto里面定义枚举类型
enum CourseProperty {
    CoursePropertyAny = 0;
    CoursePropertyUnknown = 1;
    CoursePropertyGeneralCore = 2;                    // 通识核心课
    CoursePropertyGeneralElective  = 3;               // 通识选修课
    CoursePropertyGeneralRequired  = 4;               // 通识必修课
    CoursePropertyMajorCore = 5;                      // 专业主干课程
    CoursePropertyMajorElective = 6;                 // 个性发展课程
}

message Course {
  int64 id = 1;
  string course_code = 2;
  string name = 3;
  string teacher = 5;
  string school = 6;    // 学院
  CourseProperty property = 7;  // 课程性质
  double credit = 8;    // 学分
}

message CourseSubscription {
  Course course = 1;
  string year = 2;
  string term = 3;
}

message SubscriptionListRequest {
  // 这里uid和下面的学号密码是两种查询方式所需的参数
  // uid 是从数据查， 学号密码是从教务系统查
  // 其实这里用了强制参数携带uid，其实就是向上游显式暴露了自己的一部分实现
  // 也就是除了从教务系统查询，还做了容错，教务系统没查到可以去自己系统数据查旧的数据
  // 我觉得这部分的显式暴露是不得已的做法，而且这个容错我认为也是必须有的
  // 不适合下游自己来觉得要不要使用容错策略
  int64 uid = 1;
  string student_id = 2;
  string password = 3;
  string year = 4;
  string term = 5;
}

message SubscriptionListResponse {
  repeated CourseSubscription course_subscriptions = 1;
}

message GetDetailByIdRequest {
  int64 course_id = 1;
}

message GetDetailByIdResponse {
  Course course = 1;
}

message GetSubscriberUidsByIdRequest {
  int64 course_id = 1;
  int64 cur_uid = 2;
  int64 limit = 3;
}

message GetSubscriberUidsByIdResponse {
  repeated int64 invitee_uids = 1;
}

message SubscribedRequest {
  int64 uid = 1;
  int64 course_id = 2;
}

message SubscribedResponse {
  bool subscribed = 1;
}

message FindIdOrUpsertByCoursesRequest {
  repeated Course courses = 1;
}

message FindIdOrUpsertByCoursesResponse {
  repeated Course courses = 1;
}